{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from \"lodash\";\nimport faker from \"faker\";\nimport React, { Component } from \"react\";\nimport { Search, Grid, Header, Segment, Image } from \"semantic-ui-react\";\n\nconst source = _.times(200, () => ({\n  title: faker.company.companyName(),\n  description: faker.company.catchPhrase(),\n  image: faker.internet.avatar(),\n  price: faker.finance.amount(0, 100, 2, \"$\")\n}));\n\nconsole.log(typeof source[0].title);\nconst initialState = {\n  isLoading: false,\n  results: source,\n  value: \"\"\n};\nexport default class SearchExampleStandard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", initialState);\n\n    _defineProperty(this, \"handleResultSelect\", (e, {\n      result\n    }) => {\n      this.setState({\n        value: result.title\n      });\n      console.log(result);\n    });\n\n    _defineProperty(this, \"handleSearchChange\", (e, {\n      value\n    }) => {\n      console.log(value);\n      this.setState({\n        isLoading: true,\n        value\n      });\n      setTimeout(() => {\n        if (this.state.value.length < 1) return this.setState(initialState);\n        const re = new RegExp(_.escapeRegExp(this.state.value), \"i\");\n\n        const isMatch = result => re.test(result.title);\n\n        this.setState({\n          isLoading: false,\n          results: _.filter(source, isMatch)\n        });\n      }, 300);\n    });\n  }\n\n  render() {\n    const {\n      isLoading,\n      value,\n      results\n    } = this.state;\n    console.log(results);\n    return __jsx(Grid, null, __jsx(Grid.Column, {\n      width: 6\n    }, __jsx(Search, _extends({\n      loading: isLoading,\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 500, {\n        leading: true\n      }),\n      results: results,\n      value: value\n    }, this.props, {\n      renderer: ({\n        image,\n        price,\n        title,\n        description\n      }) => [image && __jsx(\"div\", {\n        key: \"image\",\n        className: \"image\"\n      }, createHTMLImage(image, {\n        autoGenerateKey: false\n      })), __jsx(\"div\", {\n        key: \"content\",\n        className: \"content\"\n      }, title && __jsx(\"div\", {\n        className: \"title\"\n      }, title), title && __jsx(\"div\", {\n        className: \"title\"\n      }, title), description && __jsx(\"div\", {\n        className: \"description\"\n      }, description))]\n    })), __jsx(\"div\", null, __jsx(\"pre\", {\n      style: {\n        overflowX: \"auto\"\n      }\n    }, this.state.results.map((i, jj) => __jsx(React.Fragment, null, __jsx(\"div\", {\n      key: jj\n    }, __jsx(\"div\", null, i.title), __jsx(\"br\", null), \" \", __jsx(\"div\", null, i.description), \" \", __jsx(\"div\", null, __jsx(Image, {\n      src: i.image,\n      size: \"small\"\n    })), __jsx(\"div\", null, i.price))))))), __jsx(Grid.Column, {\n      width: 10\n    }, __jsx(Segment, null, __jsx(Header, null, \"State\"), __jsx(\"pre\", {\n      style: {\n        overflowX: \"auto\"\n      }\n    }, JSON.stringify(this.state, null, 2)), __jsx(Header, null, \"Options\"), __jsx(\"pre\", {\n      style: {\n        overflowX: \"auto\"\n      }\n    }, JSON.stringify(source, null, 2)))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}